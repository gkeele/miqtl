as.numeric(logLik(fit1))), df = length(fixef(fit1)) -
length(fixef(fit0)), lower.tail = FALSE)
}
else {
if (locus.as.fixed) {
X <- cbind(fit0$x, X)
fit1 <- lmmbygls(formula = locus.formula,
y = y, X = X, eigen.K = fit0$eigen.K, K = fit0$K,
weights = weights, use.par = "h2", fix.par = fix.par,
M = fit0$M, logDetV = fit0$logDetV, brute = brute)
LOD.vec[i] <- log10(exp(fit1$logLik - fit0$logLik))
p.vec[i] <- get.p.value(fit0 = fit0, fit1 = fit1,
method = p.value.method)
df[i] <- fit1$rank
if (return.allele.effects) {
allele.effects[, i] <- get.allele.effects.from.fixef(fit = fit1,
founders = founders, allele.in.intercept = founders[max.column])
}
}
else {
fit1 <- lmmbygls.random(formula = null.formula,
pheno.id = pheno.id, y = y, X = fit0$x,
eigen.K = fit0$eigen.K, K = fit0$K, Z = X,
weights = weights, use.par = "h2", null.h2 = fix.par,
brute = brute)
LOD.vec[i] <- log10(exp(fit1$REML.logLik -
fit0.REML$REML.logLik))
p.vec[i] <- get.p.value(fit0 = fit0.REML,
fit1 = fit1, method = p.value.method)
df[i] <- 1
if (return.allele.effects) {
allele.effects[, i] <- get.allele.effects.from.ranef(fit = fit1,
founders = founders)
}
}
}
}
if (debug.single.fit) {
browser()
}
if (print.locus.fit) {
cat(paste("locus", i, "out of", length(loci)), "\n")
}
else {
if (use.progress.bar) {
setTxtProgressBar(pb, i)
}
}
}
names(LOD.vec) <- names(p.vec) <- names(df) <- loci
output <- list(LOD = LOD.vec, p.value = p.vec, MI.LOD = MI.LOD,
MI.p.value = MI.p.value, df = df, pos = list(Mb = h$getMarkerLocation(loci,
scale = "Mb"), cM = h$getMarkerLocation(loci, scale = "cM")),
loci = loci, chr = h$getChromOfLocus(loci), fit0 = fit0,
fit0.REML = fit0.REML, allele.effects = allele.effects,
y = fit0$y, formula = formula.string, model.type = model,
p.value.method = p.value.method, impute.map = impute.map,
locus.effect.type = fit1$locus.effect.type)
if (length(just.these.loci) == 1) {
output$fit1 <- fit1
}
if (pheno.id != geno.id & !is.null(K)) {
rownames(Z) <- as.character(data[, pheno.id])
output$Z <- Z
}
return(output)
}
# MI
miqtl.mi11.scan <- scan.h2lmm2(genomecache = genomecache, data = phenotypes$data, pheno.id = "SUBJECT.NAME.1", geno.id =  "SUBJECT.NAME.1",
formula=sim.y.1 ~ 1, use.multi.impute = TRUE, num.imp = 11)
scan.h2lmm2<-function (genomecache, data, formula, K = NULL, model = c("additive",
"full"), locus.as.fixed = TRUE, return.allele.effects = FALSE,
p.value.method = c("LRT", "ANOVA"), use.par = "h2", use.multi.impute = TRUE,
num.imp = 11, chr = "all", brute = TRUE, use.fix.par = TRUE,
seed = 1, pheno.id = "SUBJECT.NAME", geno.id = "SUBJECT.NAME",
weights = NULL, do.augment = FALSE, use.full.null = FALSE,
added.data.points = 1, just.these.loci = NULL, print.locus.fit = FALSE,
use.progress.bar = TRUE, debug.single.fit = FALSE, ...)
{
model <- model[1]
p.value.method <- p.value.method[1]
h <- DiploprobReader$new(genomecache)
founders <- h$getFounders()
num.founders <- length(founders)
loci <- h$getLoci()
if (pheno.id != geno.id & is.null(K)) {
K <- diag(length(unique(data[, geno.id])))
rownames(K) <- colnames(K) <- unique(data[, geno.id])
}
cache.subjects <- rownames(h$getLocusMatrix(loci[1], model = "additive"))
data.and.K <- miqtl:::make.processed.data(formula = formula, data = data,
cache.subjects = cache.subjects, K = K, pheno.id = pheno.id,
geno.id = geno.id)
data <- data.and.K$data
K <- data.and.K$K
if (!is.null(K)) {
if (all(dim(K) == 0)) {
stop("The colnames and rownames of K do not match the specified ID geno.id in the data",
call. = FALSE)
}
}
cache.subjects <- unique(as.character(data[, geno.id]))
if (!is.null(weights)) {
weights <- weights[as.character(data[, pheno.id])]
}
loci.chr <- h$getChromOfLocus(loci)
if (chr[1] != "all") {
loci.chr <- h$getChromOfLocus(loci)
loci <- loci[loci.chr %in% chr]
}
if (!is.null(just.these.loci)) {
loci <- loci[loci %in% just.these.loci]
loci.chr <- loci.chr[loci %in% just.these.loci]
}
augment.indicator <- NULL
formula.string <- Reduce(paste, deparse(formula))
null.formula <- miqtl:::make.null.formula(formula = formula, do.augment = do.augment)
original.n <- nrow(data)
old.data <- data
if (do.augment) {
augment.n <- ifelse(model == "additive", num.founders,
num.founders + choose(num.founders, 2))
augment.indicator <- c(rep(0, original.n), rep(1, augment.n))
if (!use.full.null) {
data <- miqtl:::make.simple.augment.data(data = data, formula = formula,
augment.n = augment.n)
data <- data.frame(data, augment.indicator = augment.indicator)
K <- miqtl:::make.simple.augment.K(K = K, augment.n = augment.n)
}
if (use.full.null) {
no.augment.K <- K
K <- miqtl:::make.full.null.augment.K(K = no.augment.K,
original.n = original.n, augment.n = augment.n)
data <- miqtl:::make.full.null.augment.data(formula = formula,
data = data, no.augment.K = no.augment.K, use.par = use.par,
brute = brute, original.n = original.n, augment.n = augment.n,
weights = weights)
}
weights <- miqtl:::make.augment.weights(data = data, weights = weights,
augment.n = augment.n, added.data.points = added.data.points)
}
use.lmer <- miqtl:::check.for.lmer.formula(null.formula)
if (model == "full" | use.multi.impute) {
happy.locus.old <- paste(loci[1], "RData", sep = ".")
happy.locus.new <- paste(gsub("([[:upper:]])", "@\\1",
loci[1]), "RData", sep = ".")
locus_path <- paste0(genomecache, "/full/chr", h$getChromOfLocus(loci[1]),
"/")
if (file.exists(paste0(locus_path, "data"))) {
locus_path <- paste0(locus_path, "data/")
}
if (!file.exists(paste0(locus_path, happy.locus.old)) &
!file.exists(paste0(locus_path, happy.locus.new))) {
stop("Full model probabilities not available in genome cache, only additive ROP can be fit",
call. = FALSE)
}
}
if (model == "full" & return.allele.effects) {
return.allele.effects <- FALSE
cat("Allele effects from regression models currently only available with additive model\n",
"Setting return.allele.effects to FALSE\n")
}
if (use.lmer & p.value.method == "ANOVA") {
cat("ANOVA not currently supported with our implementation of LMER, switching to LRT\n")
p.value.method <- "LRT"
}
else if (p.value.method == "ANOVA" & (!is.null(K) | !locus.as.fixed)) {
cat("Standard ANOVA F-test not valid with mixed effect model, switching to LRT\n")
p.value.method <- "LRT"
}
if (use.lmer & !is.null(K)) {
stop("Cannot use LMER sparse random effects AND a non-sparse random effect",
call. = FALSE)
}
if (use.lmer & !locus.as.fixed) {
stop("Cannot use LMER sparse random effects AND fit locus effect as random",
call. = FALSE)
}
if (!use.fix.par & !locus.as.fixed) {
cat("standard ANOVA F-test not valid with mixed effect model, switching to LRT\n")
use.fix.par <- TRUE
}
if (!locus.as.fixed & p.value.method == "LRT") {
p.value.method <- "LRT.random.locus"
}
if (use.lmer) {
fit0 <- lmmbylmer(formula = null.formula, data = data,
REML = FALSE, weights = weights)
fit0.REML <- lmmbylmer(formula = null.formula, data = data,
REML = TRUE, weights = weights)
fix.par <- NULL
}
else {
if (is.null(K)) {
fit0 <- lmmbygls(formula = null.formula, data = data,
eigen.K = NULL, K = NULL, pheno.id = pheno.id,
use.par = "h2", fix.par = 0, weights = weights,
brute = brute)
fit0.REML <- lmmbygls(formula = null.formula, data = data,
eigen.K = NULL, K = NULL, pheno.id = pheno.id,
use.par = "h2.REML", fix.par = 0, weights = weights,
brute = brute)
}
else {
if (pheno.id != geno.id) {
Z <- model.matrix(process.random.formula(geno.id = geno.id),
data = data)
K <- crossprod(t(Z), tcrossprod(K, Z))
rownames(K) <- colnames(K) <- as.character(data[,
pheno.id])
}
if (!is.null(weights)) {
J <- weights^(1/2) * t(weights^(1/2) * K)
eigen.J <- process_eigen_decomposition(eigen.decomp = eigen(J,
symmetric = TRUE))
fit0 <- lmmbygls(null.formula, data = data,
pheno.id = pheno.id, eigen.K = eigen.J, K = K,
use.par = use.par, weights = weights, brute = brute)
fit0.REML <- lmmbygls(null.formula, data = data,
pheno.id = pheno.id, eigen.K = eigen.J, K = K,
use.par = "h2.REML", weights = weights, brute = brute)
}
else {
eigen.K <- process_eigen_decomposition(eigen.decomp = eigen(K,
symmetric = TRUE))
fit0 <- lmmbygls(null.formula, data = data,
pheno.id = pheno.id, eigen.K = eigen.K, K = K,
use.par = use.par, weights = weights, brute = brute)
fit0.REML <- lmmbygls(null.formula, data = data,
pheno.id = pheno.id, eigen.K = eigen.K, K = K,
use.par = "h2.REML", weights = weights, brute = brute)
}
}
if (use.fix.par) {
fix.par <- ifelse(locus.as.fixed, fit0$h2, fit0.REML$h2)
}
if (!use.fix.par) {
fix.par <- NULL
}
}
MI.LOD <- MI.p.value <- allele.effects <- NULL
LOD.vec <- p.vec <- df <- rep(NA, length(loci))
null.data <- data
if (return.allele.effects) {
if (use.multi.impute) {
allele.effects <- array(NA, dim = c(length(founders),
length(loci), num.imp), dimnames = list(founders,
loci, paste0("imp", 1:num.imp)))
}
else {
allele.effects <- matrix(NA, nrow = length(founders),
ncol = length(loci), dimnames = list(founders,
loci))
}
}
impute.map <- data.frame(data[, pheno.id], data[, geno.id])
names(impute.map) <- c(pheno.id, geno.id)
non.augment.subjects <- as.character(data[, geno.id])[grep(pattern = "augment",
x = as.character(data[, geno.id]), invert = TRUE)]
y <- data$y
if (!print.locus.fit) {
if (use.progress.bar) {
pb <- txtProgressBar(min = 0, max = length(loci),
style = 3)
}
}
for (i in 1:length(loci)) {
if (use.multi.impute) {
if (i == 1) {
MI.LOD <- MI.p.value <- matrix(NA, nrow = num.imp,
ncol = length(loci))
}
diplotype.prob.matrix <- h$getLocusMatrix(loci[i],
model = "full", subjects = non.augment.subjects)
if (do.augment) {
if (model == "additive") {
augment.matrix <- matrix(0, nrow = augment.n,
ncol = choose(augment.n, 2) + augment.n)
for (k in 1:augment.n) {
augment.matrix[k, k] <- 1
}
}
if (model == "full") {
augment.matrix <- diag(augment.n)
}
sample.names <- rownames(diplotype.prob.matrix)
diplotype.prob.matrix <- rbind(diplotype.prob.matrix,
augment.matrix)
rownames(diplotype.prob.matrix) <- c(sample.names,
paste0("augment.obs", 1:augment.n))
}
if (locus.as.fixed) {
fit0.for.mi <- fit0
}
else {
fit0.for.mi <- fit0.REML
}
tryCatch(fit1 <- multi.imput.lmmbygls(formula = formula,
y = y, X.probs = diplotype.prob.matrix, weights = weights,
locus.as.fixed = locus.as.fixed, return.allele.effects = return.allele.effects,
model = model, p.value.method = p.value.method,
founders = founders, pheno.id = pheno.id, num.imp = num.imp,
use.lmer = use.lmer, impute.map = impute.map,
use.par = use.par, fix.par = fix.par, fit0 = fit0.for.mi,
do.augment = do.augment, brute = brute, seed = seed),
error = function(e){
saveRDS(diplotype.prob.matrix, "diplotemp.rds")
saveRDS(impute.map,"imputetemp.rds")
View(impute.map)
View(diplotype.prob.matrix)
stop()}
)
MI.LOD[, i] <- fit1$LOD
MI.p.value[, i] <- fit1$p.value
LOD.vec[i] <- median(fit1$LOD)
p.vec[i] <- median(fit1$p.value)
if (return.allele.effects) {
allele.effects[, i, ] <- fit1$allele.effects
}
}
else {
X <- h$getLocusMatrix(loci[i], model = model, subjects = non.augment.subjects)
keep.col <- 1:ncol(X)
if (locus.as.fixed) {
max.column <- which.max(colSums(X, na.rm = TRUE))[1]
keep.col <- keep.col[keep.col != max.column]
X <- X[, keep.col]
}
colnames(X) <- gsub(pattern = "/", replacement = ".",
x = colnames(X), fixed = TRUE)
locus.formula <- miqtl:::make.alt.formula(formula = formula,
X = X, do.augment = do.augment)
if (do.augment) {
X.names <- rownames(X)
if (model == "additive") {
X <- rbind(X, 2 * diag(augment.n)[, keep.col])
}
if (model == "full") {
X <- rbind(X, diag(augment.n)[, keep.col])
}
rownames(X) <- c(X.names, paste0("augment.obs",
1:augment.n))
}
if (use.lmer) {
data <- cbind(null.data, X)
fit1 <- lmmbylmer(formula = locus.formula, data = data,
REML = FALSE, weights = weights)
LOD.vec[i] <- log10(exp(as.numeric(logLik(fit1)) -
as.numeric(logLik(fit0))))
p.vec[i] <- pchisq(q = -2 * (as.numeric(logLik(fit0)) -
as.numeric(logLik(fit1))), df = length(fixef(fit1)) -
length(fixef(fit0)), lower.tail = FALSE)
}
else {
if (locus.as.fixed) {
X <- cbind(fit0$x, X)
fit1 <- lmmbygls(formula = locus.formula,
y = y, X = X, eigen.K = fit0$eigen.K, K = fit0$K,
weights = weights, use.par = "h2", fix.par = fix.par,
M = fit0$M, logDetV = fit0$logDetV, brute = brute)
LOD.vec[i] <- log10(exp(fit1$logLik - fit0$logLik))
p.vec[i] <- get.p.value(fit0 = fit0, fit1 = fit1,
method = p.value.method)
df[i] <- fit1$rank
if (return.allele.effects) {
allele.effects[, i] <- get.allele.effects.from.fixef(fit = fit1,
founders = founders, allele.in.intercept = founders[max.column])
}
}
else {
fit1 <- lmmbygls.random(formula = null.formula,
pheno.id = pheno.id, y = y, X = fit0$x,
eigen.K = fit0$eigen.K, K = fit0$K, Z = X,
weights = weights, use.par = "h2", null.h2 = fix.par,
brute = brute)
LOD.vec[i] <- log10(exp(fit1$REML.logLik -
fit0.REML$REML.logLik))
p.vec[i] <- get.p.value(fit0 = fit0.REML,
fit1 = fit1, method = p.value.method)
df[i] <- 1
if (return.allele.effects) {
allele.effects[, i] <- get.allele.effects.from.ranef(fit = fit1,
founders = founders)
}
}
}
}
if (debug.single.fit) {
browser()
}
if (print.locus.fit) {
cat(paste("locus", i, "out of", length(loci)), "\n")
}
else {
if (use.progress.bar) {
setTxtProgressBar(pb, i)
}
}
}
names(LOD.vec) <- names(p.vec) <- names(df) <- loci
output <- list(LOD = LOD.vec, p.value = p.vec, MI.LOD = MI.LOD,
MI.p.value = MI.p.value, df = df, pos = list(Mb = h$getMarkerLocation(loci,
scale = "Mb"), cM = h$getMarkerLocation(loci, scale = "cM")),
loci = loci, chr = h$getChromOfLocus(loci), fit0 = fit0,
fit0.REML = fit0.REML, allele.effects = allele.effects,
y = fit0$y, formula = formula.string, model.type = model,
p.value.method = p.value.method, impute.map = impute.map,
locus.effect.type = fit1$locus.effect.type)
if (length(just.these.loci) == 1) {
output$fit1 <- fit1
}
if (pheno.id != geno.id & !is.null(K)) {
rownames(Z) <- as.character(data[, pheno.id])
output$Z <- Z
}
return(output)
}
# MI
miqtl.mi11.scan <- scan.h2lmm2(genomecache = genomecache, data = phenotypes$data, pheno.id = "SUBJECT.NAME.1", geno.id =  "SUBJECT.NAME.1",
formula=sim.y.1 ~ 1, use.multi.impute = TRUE, num.imp = 11)
getwd()
diplotype.probs<- readRDS("diplotemp.rds")
impute.map<- readRDS("imputetemp.rds")
t(apply(diplotype.probs, 1, function(x) rmultinom(1, 1, x)))
which(colSums(diplotype.probs == 0) == nrow(diplotype.probs))
View(diplotype.probs[which(,colSums(diplotype.probs == 0) == nrow(diplotype.probs)])
View(diplotype.probs[,which(colSums(diplotype.probs == 0) == nrow(diplotype.probs)])
View(diplotype.probs[,which(colSums(diplotype.probs == 0) == nrow(diplotype.probs)]))
View(diplotype.probs[,which(colSums(diplotype.probs == 0) == nrow(diplotype.probs))])
View(diplotype.probs[which(colSums(diplotype.probs == 0) == nrow(diplotype.probs)),])
View(diplotype.probs[,which(colSums(diplotype.probs == 0) == nrow(diplotype.probs))])
rmultinom(1,1,c(0,0,0,0,0,0))
rmultinom(1,1,c(0,0,0,0,0,0.5))
rmultinom(1,1,c(0,0,0,0,0,0.5))
rmultinom(1,1,c(0,0,0,0,0,0.5))
rmultinom(1,1,c(0,0,0,0,0,0.5))
rmultinom(1,1,c(0,0,0,0,0,0.5))
rmultinom(1,1,c(0,0,0,0,0,0.5))
rmultinom(1,1,c(0,0,0,0,0,0.5))
rmultinom(1,1,c(0,0,0,0,0,0.5))
rmultinom(1,1,c(0,0,0,0,0,0.5))
rmultinom(1,1,c(0,0,0,0,0,0.5))
rmultinom(1,1,c(0,0,0,0,0,0.5))
rmultinom(1,1,c(0,0,0,0,0,0.5))
rmultinom(1,1,c(0,0,0,0,0,0.5))
rmultinom(1,1,c(0,0,0,0,0,0.5))
rmultinom(1,1,c(0,0,0,0,0,0.5))
rmultinom(1,1,c(0,0,0,0,0,0.005))
rmultinom(1,1,c(0,0,0,0,0,0.005))
rmultinom(1,1,c(0,0,0,0,0,0.005))
rmultinom(1,1,c(0,0.1,0,0,0,0.005))
rmultinom(1,1,c(0,0.1,0,0,0,0.005))
rmultinom(1,1,c(0,0.1,0,0,0,0.005))
rmultinom(1,1,c(0,0.1,0,0,0,0.005))
rmultinom(1,1,c(0,0.1,0,0,0,0.5))
rmultinom(1,1,c(0,0.1,0,0,0,0.5))
rmultinom(1,1,c(0,0.1,0,0,0,0.5))
rmultinom(1,1,c(0,0.1,0,0,0,0.5))
rmultinom(1,1,c(0,0.1,0,0,0,0.5))
rmultinom(1,1,c(0,0.1,0,0,0,0.5))
rmultinom(1,1,c(0,0.1,0,0,0,0.5))
rmultinom(1,1,c(0,0.1,0,0,0,0.5))
rmultinom(1,1,c(0,0.1,0,0,0,0.5))
rmultinom(1,1,c(0,0.1,0,0,0,0.5))
?apply
which(rowSums(diplotype.probs == 0) == nrow(diplotype.probs))
which(rowSums(diplotype.probs == 0) == ncol(diplotype.probs))
View(diplotype.probs[which(rowSums(diplotype.probs == 0) == ncol(diplotype.probs)),])
?sim.CC.data
View(sim.CC.data())
View(sim.CC.data
View(sim.CC.data)
View(sim.CC.data)
View(phenotypes)
View(phenotypes$data)
## Read in phenotype or simulate it in sparcc
phenotypes <- sim.CC.data(genomecache = genomecache, num.lines = 30, num.sim = 10, num.replicates = 2, qtl.effect.size = 0.8)
## Map with scan.h2lmm
# ROP
miqtl.rop.scan <- scan.h2lmm(genomecache = genomecache, data = phenotypes$data, pheno.id = "SUBJECT.NAME.1", geno.id =  "SUBJECT.NAME.1",
formula = sim.y.1 ~ 1, use.multi.impute = FALSE, return.allele.effects = TRUE)
genome.plotter.whole(scan.list=list(ROP = miqtl.rop.scan))
# MI
miqtl.mi11.scan <- scan.h2lmm2(genomecache = genomecache, data = phenotypes$data, pheno.id = "SUBJECT.NAME.1", geno.id =  "SUBJECT.NAME.1",
formula=sim.y.1 ~ 1, use.multi.impute = TRUE, num.imp = 11)
genome.plotter.chr(miqtl.mi11.scan, chr = 5, median.band.col = "skyblue")
View(diplotype.probs[which(rowSums(diplotype.probs == 0) == ncol(diplotype.probs)),])
## Read in phenotype or simulate it in sparcc
phenotypes <- sim.CC.data(genomecache = genomecache, num.lines = 3,
num.sim = 10, num.replicates = 2, qtl.effect.size = 0.8)
phenotypes
View(phenotypes$data)
set.seed(12)
## Read in phenotype or simulate it in sparcc
phenotypes <- sim.CC.data(genomecache = genomecache, num.lines = 3,
num.sim = 10, num.replicates = 2, qtl.effect.size = 0.8)
View(phenotypes$data)
load("~/UNC/Valdar/dmet_rotation/rotation_project2/segments_happy_format_mm10/full/chr1/strains.RData")
load("~/UNC/Valdar/dmet_rotation/rotation_project2/segments_happy_format_mm10/full/chr1/subjects.RData")
View(subjects)
subjectgs
subjects
load("~/UNC/Valdar/dmet_rotation/rotation_project2/segments_happy_format_mm10/full/chr1/data/UNC2424873.RData")
View(UNC2424873)
load("~/UNC/Valdar/dmet_rotation/rotation_project2/segments_happy_format_mm10/additive/chr14/subjects.RData")
subjects
load("~/UNC/Valdar/dmet_rotation/rotation_project2/segments_happy_format_mm10/additive/chr14/data/UNC140404543.RData")
View(UNC140404543)
## Read in phenotype or simulate it in sparcc
phenotypes <- sim.CC.data(genomecache = genomecache, num.lines = 3,
num.sim = 10, num.replicates = 2, qtl.effect.size = 0.8,CC.lines = c("CC012","CC033","CC0045","CC023","CC011"))
gc()
