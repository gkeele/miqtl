par(fig=c(0.1, 0.9, 0.05, 0.35),
mai=c(0.4, 0.35, 0.3, 0.05),
new=TRUE)
plot.SIM(SIC.chr1.dilution.prop5.ped, scale="Mb", my.y.lab.line=0.9,
my.y.axis.cex=0.5, my.x.axis.cex=0.5, my.x.lab.line=1,
my.y.lab.cex=0.7, my.x.lab.cex=0.7,
my.x.padj=-2, my.y.hadj=-0.7)
dev.off()
detach("package:miqtl", unload=TRUE)
library(miqtl)
library(miqtl)
library(MASS)
## Lung
lung.cdata <- readRDS("~/Documents/Bryan_CC/chromatin_data/expmat_625ppm_lung.rds")
lung.cdata <- as.data.frame(lung.cdata)
lung.cdata$SUBJECT.NAME <- rownames(lung.cdata)
raw.lung.cdata <- readRDS("~/Documents/Bryan_CC/chromatin_data/expmat_625ppm_lung.rds")
lung.ccovariates <- readRDS("~/Documents/Bryan_CC/chromatin_data/covdata_625ppm_lung.rds")
names(lung.ccovariates)[1] <- "SUBJECT.NAME"
lung.cdata <- merge(lung.cdata, lung.ccovariates[,1:3], by="SUBJECT.NAME")
lung.cdata$Batch <- as.factor(lung.cdata$Batch)
qr.practice <- extract.qr(genomecache="~/Documents/Bryan_CC/genome_cache_thin_l2_0.01/",
model="additive", data=lung.cdata, formula=~1+Batch)
qr_0.1_practice <- extract.qr(genomecache="~/Documents/Bryan_CC/genome_cache_thin_l2_0.1/",
model="additive", data=lung.cdata, formula=~1+Batch)
practice.qr_0.1_scan <- scan.qr(qr.object=qr_0.1_practice,
data=lung.cdata, formula=rint(`chr5.31504599.31504898`)~1+Batch,
return.allele.effects=TRUE)
genome.plotter.whole(list(ROP=practice.qr_0.1_scan), just.these.chr=c(10:14))
allele.plotter.whole(scan.object=practice.qr_0.1_scan, just.these.chr=c(10:14))
perm.index <- generate.qr.permutation.index.matrix(qr.scan.object=practice.qr_0.1_scan,
num.samples=100)
perm.scans.phen1 <- run.qr.permutation.threshold.scans(perm.ind.matrix=perm.index, qr.object=qr_0.1_practice,
keep.full.scans=TRUE, scan.index=1:10,
formula=rint(`chr5.31504599.31504898`)~1+Batch, data=lung.cdata, model="additive")
colnames(lung.cdata)
perm.scans.phen2 <- run.qr.permutation.threshold.scans(perm.ind.matrix=perm.index, qr.object=qr_0.1_practice,
keep.full.scans=TRUE, scan.index=1:10,
formula=rint(`chr1.158488654.158488953`)~1+Batch, data=lung.cdata, model="additive")
get.gev.thresholds(perm.scans.phen1, percentile=0.95)
get.gev.thresholds(perm.scans.phen2, percentile=0.95)
run.qr.permutation.threshold.scans <- function(perm.ind.matrix, qr.object,
keep.full.scans=FALSE, scan.index=NULL, id="SUBJECT.NAME",
formula, data, model=c("additive", "full"),
chr="all", just.these.loci=NULL, use.progress.bar=TRUE,
...){
model <- model[1]
if(is.null(scan.index)){ scan.index <- 1:ncol(perm.ind.matrix) }
loci <- names(qr.object$qr.list)
loci.chr <- qr.object$chr
if(chr[1] != "all"){
loci <- loci[loci.chr %in% chr]
}
if(!is.null(just.these.loci)){
loci <- loci[loci %in% just.these.loci]
loci.chr <- loci.chr[loci %in% just.these.loci]
}
full.p <- these.pos <- NULL
if(keep.full.scans){
full.p <- matrix(NA, nrow=length(scan.index), ncol=length(loci))
colnames(full.p) <- loci
these.pos <- list(Mb=qr.object$pos$Mb[loci],
cM=qr.object$pos$cM[loci])
}
min.p <- rep(NA, length(scan.index))
formula.string <- Reduce(paste, deparse(formula))
perm.formula <- formula(paste0("new_y ~ ", unlist(strsplit(formula.string, split="~"))[-1]))
for(i in scan.index){
browser()
new.y <- data.frame(perm.ind.matrix[,i], rownames(perm.ind.matrix))
names(new.y) <- c("new_y", id)
this.data <- merge(x=new.y, y=data, by=id, all.x=TRUE)
## Matrix of permutation indexes
this.data[,all.vars(formula)[1]] <- this.data[,all.vars(formula)[1]][this.data$new_y]
this.scan <- scan.qr(qr.object=qr.object, data=this.data,
formula=perm.formula, model=model,
id=id, chr=chr, return.allele.effects=FALSE, use.progress.bar=use.progress.bar,
...)
if(keep.full.scans){
full.p[i,] <- this.scan$p.value
}
min.p[i] <-  min(this.scan$p.value)
cat("\n", "Threshold scan:", i, "complete", "\n")
}
return(list(full.results=list(LOD=NULL,
p.value=full.p,
chr=loci.chr,
pos=these.pos),
max.statistics=list(LOD=NULL,
p.value=min.p)))
}
perm.scans.phen1 <- run.qr.permutation.threshold.scans(perm.ind.matrix=perm.index, qr.object=qr_0.1_practice,
keep.full.scans=TRUE, scan.index=1:10,
formula=rint(`chr5.31504599.31504898`)~1+Batch, data=lung.cdata, model="additive")
formula.string
perm.formula
new.y <- data.frame(perm.ind.matrix[,i], rownames(perm.ind.matrix))
new.y
id
names(new.y) <- c("new_y", id)
new.y
?data.frame
run.qr.permutation.threshold.scans <- function(perm.ind.matrix, qr.object,
keep.full.scans=FALSE, scan.index=NULL, id="SUBJECT.NAME",
formula, data, model=c("additive", "full"),
chr="all", just.these.loci=NULL, use.progress.bar=TRUE,
...){
model <- model[1]
if(is.null(scan.index)){ scan.index <- 1:ncol(perm.ind.matrix) }
loci <- names(qr.object$qr.list)
loci.chr <- qr.object$chr
if(chr[1] != "all"){
loci <- loci[loci.chr %in% chr]
}
if(!is.null(just.these.loci)){
loci <- loci[loci %in% just.these.loci]
loci.chr <- loci.chr[loci %in% just.these.loci]
}
full.p <- these.pos <- NULL
if(keep.full.scans){
full.p <- matrix(NA, nrow=length(scan.index), ncol=length(loci))
colnames(full.p) <- loci
these.pos <- list(Mb=qr.object$pos$Mb[loci],
cM=qr.object$pos$cM[loci])
}
min.p <- rep(NA, length(scan.index))
formula.string <- Reduce(paste, deparse(formula))
perm.formula <- formula(paste0("new_y ~ ", unlist(strsplit(formula.string, split="~"))[-1]))
for(i in scan.index){
browser()
new.y <- data.frame(new_y=perm.ind.matrix[,i], id=rownames(perm.ind.matrix))
this.data <- merge(x=new.y, y=data, by=id, all.x=TRUE)
## Matrix of permutation indexes
this.data[,all.vars(formula)[1]] <- this.data[,all.vars(formula)[1]][this.data$new_y]
this.scan <- scan.qr(qr.object=qr.object, data=this.data,
formula=perm.formula, model=model,
id=id, chr=chr, return.allele.effects=FALSE, use.progress.bar=use.progress.bar,
...)
if(keep.full.scans){
full.p[i,] <- this.scan$p.value
}
min.p[i] <-  min(this.scan$p.value)
cat("\n", "Threshold scan:", i, "complete", "\n")
}
return(list(full.results=list(LOD=NULL,
p.value=full.p,
chr=loci.chr,
pos=these.pos),
max.statistics=list(LOD=NULL,
p.value=min.p)))
}
perm.scans.phen1 <- run.qr.permutation.threshold.scans(perm.ind.matrix=perm.index, qr.object=qr_0.1_practice,
keep.full.scans=TRUE, scan.index=1:10,
formula=rint(`chr5.31504599.31504898`)~1+Batch, data=lung.cdata, model="additive")
mode.frame(formula, data=data)
model.frame(formula, data=data)
run.qr.permutation.threshold.scans <- function(perm.ind.matrix, qr.object,
keep.full.scans=FALSE, scan.index=NULL, id="SUBJECT.NAME",
formula, data, model=c("additive", "full"),
chr="all", just.these.loci=NULL, use.progress.bar=TRUE,
...){
model <- model[1]
if(is.null(scan.index)){ scan.index <- 1:ncol(perm.ind.matrix) }
loci <- names(qr.object$qr.list)
loci.chr <- qr.object$chr
if(chr[1] != "all"){
loci <- loci[loci.chr %in% chr]
}
if(!is.null(just.these.loci)){
loci <- loci[loci %in% just.these.loci]
loci.chr <- loci.chr[loci %in% just.these.loci]
}
full.p <- these.pos <- NULL
if(keep.full.scans){
full.p <- matrix(NA, nrow=length(scan.index), ncol=length(loci))
colnames(full.p) <- loci
these.pos <- list(Mb=qr.object$pos$Mb[loci],
cM=qr.object$pos$cM[loci])
}
min.p <- rep(NA, length(scan.index))
y <- model.frame(formula, data=data)[,1]
formula.string <- Reduce(paste, deparse(formula))
perm.formula <- formula(paste0("new_y ~ ", unlist(strsplit(formula.string, split="~"))[-1]))
for(i in scan.index){
new.y <- data.frame(new_y=y[perm.ind.matrix[,i]], id=rownames(perm.ind.matrix))
this.data <- merge(x=new.y, y=data, by=id, all.x=TRUE)
## Matrix of permutation indexes
this.data[,all.vars(formula)[1]] <- this.data[,all.vars(formula)[1]][this.data$new_y]
this.scan <- scan.qr(qr.object=qr.object, data=this.data,
formula=perm.formula, model=model,
id=id, chr=chr, return.allele.effects=FALSE, use.progress.bar=use.progress.bar,
...)
if(keep.full.scans){
full.p[i,] <- this.scan$p.value
}
min.p[i] <-  min(this.scan$p.value)
cat("\n", "Threshold scan:", i, "complete", "\n")
}
return(list(full.results=list(LOD=NULL,
p.value=full.p,
chr=loci.chr,
pos=these.pos),
max.statistics=list(LOD=NULL,
p.value=min.p)))
}
perm.scans.phen1 <- run.qr.permutation.threshold.scans(perm.ind.matrix=perm.index, qr.object=qr_0.1_practice,
keep.full.scans=TRUE, scan.index=1:10,
formula=rint(`chr5.31504599.31504898`)~1+Batch, data=lung.cdata, model="additive")
run.qr.permutation.threshold.scans <- function(perm.ind.matrix, qr.object,
keep.full.scans=FALSE, scan.index=NULL, id="SUBJECT.NAME",
formula, data, model=c("additive", "full"),
chr="all", just.these.loci=NULL, use.progress.bar=TRUE,
...){
model <- model[1]
if(is.null(scan.index)){ scan.index <- 1:ncol(perm.ind.matrix) }
loci <- names(qr.object$qr.list)
loci.chr <- qr.object$chr
if(chr[1] != "all"){
loci <- loci[loci.chr %in% chr]
}
if(!is.null(just.these.loci)){
loci <- loci[loci %in% just.these.loci]
loci.chr <- loci.chr[loci %in% just.these.loci]
}
full.p <- these.pos <- NULL
if(keep.full.scans){
full.p <- matrix(NA, nrow=length(scan.index), ncol=length(loci))
colnames(full.p) <- loci
these.pos <- list(Mb=qr.object$pos$Mb[loci],
cM=qr.object$pos$cM[loci])
}
min.p <- rep(NA, length(scan.index))
y <- model.frame(formula, data=data)[,1]
formula.string <- Reduce(paste, deparse(formula))
perm.formula <- formula(paste0("new_y ~ ", unlist(strsplit(formula.string, split="~"))[-1]))
for(i in scan.index){
new.y <- data.frame(new_y=y[perm.ind.matrix[,i]], id=rownames(perm.ind.matrix))
browser()
this.data <- merge(x=new.y, y=data, by=id, all.x=TRUE)
## Matrix of permutation indexes
this.data[,all.vars(formula)[1]] <- this.data[,all.vars(formula)[1]][this.data$new_y]
this.scan <- scan.qr(qr.object=qr.object, data=this.data,
formula=perm.formula, model=model,
id=id, chr=chr, return.allele.effects=FALSE, use.progress.bar=use.progress.bar,
...)
if(keep.full.scans){
full.p[i,] <- this.scan$p.value
}
min.p[i] <-  min(this.scan$p.value)
cat("\n", "Threshold scan:", i, "complete", "\n")
}
return(list(full.results=list(LOD=NULL,
p.value=full.p,
chr=loci.chr,
pos=these.pos),
max.statistics=list(LOD=NULL,
p.value=min.p)))
}
perm.scans.phen1 <- run.qr.permutation.threshold.scans(perm.ind.matrix=perm.index, qr.object=qr_0.1_practice,
keep.full.scans=TRUE, scan.index=1:10,
formula=rint(`chr5.31504599.31504898`)~1+Batch, data=lung.cdata, model="additive")
new.y
y
new.y$new_y
new.y[1,]
data[1,]
data$id
names(new.y)
get(id)
?data.frame
data.frame(y[perm.ind.matrix[,i]], rownames(perm.ind.matrix), col.names=c("new_y", id))
y[perm.ind.matrix[,i]]
new.y <- data.frame(new_y=y[perm.ind.matrix[,i]], id=rownames(perm.ind.matrix))
new.y <- data.frame(y[perm.ind.matrix[,i]], rownames(perm.ind.matrix), col.names=c("new_y", id))
run.qr.permutation.threshold.scans <- function(perm.ind.matrix, qr.object,
keep.full.scans=FALSE, scan.index=NULL, id="SUBJECT.NAME",
formula, data, model=c("additive", "full"),
chr="all", just.these.loci=NULL, use.progress.bar=TRUE,
...){
model <- model[1]
if(is.null(scan.index)){ scan.index <- 1:ncol(perm.ind.matrix) }
loci <- names(qr.object$qr.list)
loci.chr <- qr.object$chr
if(chr[1] != "all"){
loci <- loci[loci.chr %in% chr]
}
if(!is.null(just.these.loci)){
loci <- loci[loci %in% just.these.loci]
loci.chr <- loci.chr[loci %in% just.these.loci]
}
full.p <- these.pos <- NULL
if(keep.full.scans){
full.p <- matrix(NA, nrow=length(scan.index), ncol=length(loci))
colnames(full.p) <- loci
these.pos <- list(Mb=qr.object$pos$Mb[loci],
cM=qr.object$pos$cM[loci])
}
min.p <- rep(NA, length(scan.index))
y <- model.frame(formula, data=data)[,1]
formula.string <- Reduce(paste, deparse(formula))
perm.formula <- formula(paste0("new_y ~ ", unlist(strsplit(formula.string, split="~"))[-1]))
for(i in scan.index){
new.y <- data.frame(new_y=y[perm.ind.matrix[,i]], id=rownames(perm.ind.matrix))
names(new.y) <- c("new_y", id)
this.data <- merge(x=new.y, y=data, by=id, all.x=TRUE)
## Matrix of permutation indexes
this.data[,all.vars(formula)[1]] <- this.data[,all.vars(formula)[1]][this.data$new_y]
this.scan <- scan.qr(qr.object=qr.object, data=this.data,
formula=perm.formula, model=model,
id=id, chr=chr, return.allele.effects=FALSE, use.progress.bar=use.progress.bar,
...)
if(keep.full.scans){
full.p[i,] <- this.scan$p.value
}
min.p[i] <-  min(this.scan$p.value)
cat("\n", "Threshold scan:", i, "complete", "\n")
}
return(list(full.results=list(LOD=NULL,
p.value=full.p,
chr=loci.chr,
pos=these.pos),
max.statistics=list(LOD=NULL,
p.value=min.p)))
}
perm.scans.phen1 <- run.qr.permutation.threshold.scans(perm.ind.matrix=perm.index, qr.object=qr_0.1_practice,
keep.full.scans=TRUE, scan.index=1:10,
formula=rint(`chr5.31504599.31504898`)~1+Batch, data=lung.cdata, model="additive")
run.qr.permutation.threshold.scans <- function(perm.ind.matrix, qr.object,
keep.full.scans=FALSE, scan.index=NULL, id="SUBJECT.NAME",
formula, data, model=c("additive", "full"),
chr="all", just.these.loci=NULL, use.progress.bar=TRUE,
...){
model <- model[1]
if(is.null(scan.index)){ scan.index <- 1:ncol(perm.ind.matrix) }
loci <- names(qr.object$qr.list)
loci.chr <- qr.object$chr
if(chr[1] != "all"){
loci <- loci[loci.chr %in% chr]
}
if(!is.null(just.these.loci)){
loci <- loci[loci %in% just.these.loci]
loci.chr <- loci.chr[loci %in% just.these.loci]
}
full.p <- these.pos <- NULL
if(keep.full.scans){
full.p <- matrix(NA, nrow=length(scan.index), ncol=length(loci))
colnames(full.p) <- loci
these.pos <- list(Mb=qr.object$pos$Mb[loci],
cM=qr.object$pos$cM[loci])
}
min.p <- rep(NA, length(scan.index))
y <- model.frame(formula, data=data)[,1]
formula.string <- Reduce(paste, deparse(formula))
perm.formula <- formula(paste0("new_y ~ ", unlist(strsplit(formula.string, split="~"))[-1]))
for(i in scan.index){
new.y <- data.frame(y[perm.ind.matrix[,i]], rownames(perm.ind.matrix))
names(new.y) <- c("new_y", id)
this.data <- merge(x=new.y, y=data, by=id, all.x=TRUE)
## Matrix of permutation indexes
this.data[,all.vars(formula)[1]] <- this.data[,all.vars(formula)[1]][this.data$new_y]
this.scan <- scan.qr(qr.object=qr.object, data=this.data,
formula=perm.formula, model=model,
id=id, chr=chr, return.allele.effects=FALSE, use.progress.bar=use.progress.bar,
...)
if(keep.full.scans){
full.p[i,] <- this.scan$p.value
}
min.p[i] <-  min(this.scan$p.value)
cat("\n", "Threshold scan:", i, "complete", "\n")
}
return(list(full.results=list(LOD=NULL,
p.value=full.p,
chr=loci.chr,
pos=these.pos),
max.statistics=list(LOD=NULL,
p.value=min.p)))
}
perm.scans.phen1 <- run.qr.permutation.threshold.scans(perm.ind.matrix=perm.index, qr.object=qr_0.1_practice,
keep.full.scans=TRUE, scan.index=1:10,
formula=rint(`chr5.31504599.31504898`)~1+Batch, data=lung.cdata, model="additive")
generate.qr.permutation.index.matrix <- function(qr.scan.object, num.samples, seed=1){
n <- length(qr.scan.object$y)
set.seed(seed)
perm.ind.matrix <- replicate(n=num.samples, sample(1:n, replace=FALSE))
colnames(perm.ind.matrix) <- paste0("perm.", 1:num.samples)
rownames(perm.ind.matrix) <- names(qr.scan.object$y)
return(perm.ind.matrix)
}
#' @export
run.qr.permutation.threshold.scans <- function(perm.ind.matrix, qr.object,
keep.full.scans=FALSE, scan.index=NULL, id="SUBJECT.NAME",
formula, data, model=c("additive", "full"),
chr="all", just.these.loci=NULL, use.progress.bar=TRUE,
...){
model <- model[1]
if(is.null(scan.index)){ scan.index <- 1:ncol(perm.ind.matrix) }
loci <- names(qr.object$qr.list)
loci.chr <- qr.object$chr
if(chr[1] != "all"){
loci <- loci[loci.chr %in% chr]
}
if(!is.null(just.these.loci)){
loci <- loci[loci %in% just.these.loci]
loci.chr <- loci.chr[loci %in% just.these.loci]
}
full.p <- these.pos <- NULL
if(keep.full.scans){
full.p <- matrix(NA, nrow=length(scan.index), ncol=length(loci))
colnames(full.p) <- loci
these.pos <- list(Mb=qr.object$pos$Mb[loci],
cM=qr.object$pos$cM[loci])
}
min.p <- rep(NA, length(scan.index))
y <- model.frame(formula, data=data)[,1]
formula.string <- Reduce(paste, deparse(formula))
perm.formula <- formula(paste0("new_y ~ ", unlist(strsplit(formula.string, split="~"))[-1]))
for(i in scan.index){
new.y <- data.frame(y[perm.ind.matrix[,i]], rownames(perm.ind.matrix))
names(new.y) <- c("new_y", id)
this.data <- merge(x=new.y, y=data, by=id, all.x=TRUE)
## Matrix of permutation indexes
#this.data[,all.vars(formula)[1]] <- this.data[,all.vars(formula)[1]][this.data$new_y]
this.scan <- scan.qr(qr.object=qr.object, data=this.data,
formula=perm.formula, model=model,
id=id, chr=chr, return.allele.effects=FALSE, use.progress.bar=use.progress.bar,
...)
if(keep.full.scans){
full.p[i,] <- this.scan$p.value
}
min.p[i] <-  min(this.scan$p.value)
cat("\n", "Threshold scan:", i, "complete", "\n")
}
return(list(full.results=list(LOD=NULL,
p.value=full.p,
chr=loci.chr,
pos=these.pos),
max.statistics=list(LOD=NULL,
p.value=min.p)))
}
perm.scans.phen1 <- run.qr.permutation.threshold.scans(perm.ind.matrix=perm.index, qr.object=qr_0.1_practice,
keep.full.scans=TRUE, scan.index=1:10,
formula=rint(`chr5.31504599.31504898`)~1+Batch, data=lung.cdata, model="additive")
perm.scans.phen2 <- run.qr.permutation.threshold.scans(perm.ind.matrix=perm.index, qr.object=qr_0.1_practice,
keep.full.scans=TRUE, scan.index=1:10,
formula=rint(`chr1.158488654.158488953`)~1+Batch, data=lung.cdata, model="additive")
get.gev.thresholds(perm.scans.phen1, percentile=0.95)
get.gev.thresholds(perm.scans.phen2, percentile=0.95)
detach("package:miqtl", unload=TRUE)
library(miqtl)
perm.scans.phen1$max.statistics
perm.scans.phen1 <- run.qr.permutation.threshold.scans(perm.ind.matrix=perm.index, qr.object=qr_0.1_practice,
keep.full.scans=TRUE, scan.index=20:50,
formula=rint(`chr5.31504599.31504898`)~1+Batch, data=lung.cdata, model="additive")
dim(perm.index)
perm.scans.phen1 <- run.qr.permutation.threshold.scans(perm.ind.matrix=perm.index, qr.object=qr_0.1_practice,
keep.full.scans=TRUE, scan.index=20:30,
formula=rint(`chr5.31504599.31504898`)~1+Batch, data=lung.cdata, model="additive")
perm.scans.phen1 <- run.qr.permutation.threshold.scans(perm.ind.matrix=perm.index, qr.object=qr_0.1_practice,
keep.full.scans=TRUE, scan.index=30:40,
formula=rint(`chr5.31504599.31504898`)~1+Batch, data=lung.cdata, model="additive")
length(20:30)
perm.index
detach("package:miqtl", unload=TRUE)
library(miqtl)
perm.scans.phen1 <- run.qr.permutation.threshold.scans(perm.ind.matrix=perm.index, qr.object=qr_0.1_practice,
keep.full.scans=TRUE, scan.index=30:40,
formula=rint(`chr5.31504599.31504898`)~1+Batch, data=lung.cdata, model="additive")
run.qr.permutation.threshold.scans
rm(run.qr.permutation.threshold.scans)
perm.scans.phen1 <- run.qr.permutation.threshold.scans(perm.ind.matrix=perm.index, qr.object=qr_0.1_practice,
keep.full.scans=TRUE, scan.index=30:40,
formula=rint(`chr5.31504599.31504898`)~1+Batch, data=lung.cdata, model="additive")
perm.scans.phen1$max.statistics
get.gev.thresholds(perm.scans.phen1, percentile=0.95)
perm.scans.phen2 <- run.qr.permutation.threshold.scans(perm.ind.matrix=perm.index, qr.object=qr_0.1_practice,
keep.full.scans=TRUE, scan.index=30:40,
formula=rint(`chr1.158488654.158488953`)~1+Batch, data=lung.cdata, model="additive")
get.gev.thresholds(perm.scans.phen1, percentile=0.95)
get.gev.thresholds(perm.scans.phen2, percentile=0.95)
detach("package:miqtl", unload=TRUE)
library(miqtl)
perm.scans.phen1 <- run.qr.permutation.threshold.scans(perm.ind.matrix=perm.index, qr.object=qr_0.1_practice,
keep.full.scans=TRUE, scan.index=30:40,
formula=rint(`chr5.31504599.31504898`)~1+Batch, data=lung.cdata, model="additive")
detach("package:miqtl", unload=TRUE)
library(miqtl)
perm.scans.phen1 <- run.qr.permutation.threshold.scans(perm.ind.matrix=perm.index, qr.object=qr_0.1_practice,
keep.full.scans=TRUE, scan.index=30:40,
formula=rint(`chr5.31504599.31504898`)~1+Batch, data=lung.cdata, model="additive")
genome.plotter.whole(list("ROD fixef"=CC.sim2.RODfixef.add.scan,
"ROD ranef"=CC.sim2.RODranef.add.scan),
scale="Mb", hard.thresholds=11, thresholds.col=NULL, my.legend.lwd=c(3, 1.5),
my.title.line=0.9, my.y.line=2, my.y.axis.cex=0.7, use.legend=TRUE, title.cex=1)
genome.plotter.whole(list("ROD fixef"=CC.sim2.RODfixef.add.scan,
"ROD ranef"=CC.sim2.RODranef.add.scan), my.legend.cex = 0.9,
scale="Mb", hard.thresholds=11, thresholds.col=NULL, my.legend.lwd=c(3, 1.5),
my.title.line=0.9, my.y.line=2, my.y.axis.cex=0.7, use.legend=TRUE, title.cex=1)
pdf("~/Dropbox (ValdarLab)/diplosoc_eval/diplosoc_paper/plots/fixef_mapping_truth.pdf", height=4, width=4)
par(plt=c(0.25, 0.9, 0.6, 0.9))
genome.plotter.whole(list("ROD fixef"=CC.sim2.RODfixef.add.scan,
"ROD ranef"=CC.sim2.RODranef.add.scan), my.legend.cex = 0.9,
scale="Mb", hard.thresholds=11, thresholds.col=NULL, my.legend.lwd=c(3, 1.5),
my.title.line=0.9, my.y.line=2, my.y.axis.cex=0.7, use.legend=TRUE, title.cex=1)
par(fig=c(0.05, 1, 0.01, 0.55),
mai=c(0.1, 0.05, 0.5, 0.05),
new=TRUE)
prob.image.from.ped(ped=CC.sim2.chr1.ped, seed=1, locus.number=56, model="additive",
p.value=NULL, total.count=1, prop.true=1,
phenotype="Phenotype", phenotype.data=CC.sim2.pheno.data, main=NULL,
my.founder.cex=0.7, my.phenotype.lab.cex=0.7, my.phenotype.num.cex=0.7,
my.phenotype.line=-0.75, my.phenotype.num.padj=1)
dev.off()
