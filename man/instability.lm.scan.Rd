% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/instability_scans.R
\name{instability.lm.scan}
\alias{instability.lm.scan}
\title{Runs quick fixed effect only scans off of simple bootstrap and permutation samples.}
\usage{
instability.lm.scan(simple.sample.object, genomecache, model = c("additive",
  "full"), seed = 1, use.ROP = TRUE, num.imp = 11, chr = "all",
  just.these.loci = NULL, print.locus.fit = TRUE, ...)
}
\arguments{
\item{simple.sample.object}{An object returned from generate.simple.sample.outcomes.matrix(). This contains the samples and supporting
information for the fast scans.}

\item{genomecache}{The path to the genome cache directory. The genome cache is a particularly structured
directory that stores the haplotype probabilities/dosages at each locus. It has an additive model
subdirectory and a full model subdirectory. Each contains subdirectories for each chromosome, which then
store .RData files for the probabilities/dosages of each locus.}

\item{model}{DEFAULT: additive. Specifies how to model the founder haplotype probabilities. The additive options specifies
use of haplotype dosages, and is most commonly used. The full option regresses the phenotype on the actual
diplotype probabilities.}

\item{seed}{DEFAULT: 1. The sampling process is random, thus a seed must be set for samples to be consistent
across machines.}

\item{use.ROP}{DEFAULT: TRUE. TRUE specifies ROP. FALSE specifies multiple imputations.}

\item{num.imp}{DEFAULT: 11. The number of imputations that are used.}

\item{chr}{DEFAULT: "all". Specifies which chromosomes to scan.}

\item{just.these.loci}{DEFAULT: NULL. Specifies a reduced set of loci to fit. If loci is just one locus, the alternative model fit
will also be output as fit1.}

\item{print.locus.fit}{DEFAULT: TRUE If TRUE, prints out how many loci have been fit currently.}
}
\description{
This function runs scans of simple bootstraps or permutations from a data set with the purpose of assessing the null
distribution of the p-values.
}
\examples{
instability.lm.scan()
}
